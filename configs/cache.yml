# ==== Глобальная конфигурация =====================================

# === L0
ristretto:
  enabled: true                 # Включает Ristretto-кэш. false — отключить.

  numCounters: 1_000_000        # Кол-во счётчиков для оценки частоты доступа.
                                # Рекомендуется: 10 × ожидаемое кол-во ключей.
                                # Пример: 100k ключей → numCounters = 1_000_000

  bufferItems: 64               # Размер очереди Set-запросов перед обработкой.
                                # Рекомендуется: число CPU × 64
                                # Пример: 8 ядер → bufferItems = 512

  maxCost: 64MiB                # Максимальный "вес" всех ключей в кэше.
                                # Для maxCost важно указывать "стоимость" при Set.
                                # Пример: если каждый объект ~1Кб → вместит ~64k объектов

  defaultTTL: 15s               # Время жизни (TTL) для объектов по умолчанию.

# === L1
redis:
  enabled: true                 # Включает Redis как уровень кэша.

  host: localhost               # Хост Redis-сервера.

  port: 6370                    # Порт Redis-сервера.

  password: "12345"             # Пароль для подключения (если требуется).

  db: 0                         # Номер базы данных Redis (по умолчанию 0).

  poolSize: 10                  # Количество подключений в пуле.
                                # Рекомендуется: 2 × число CPU + N (зависит от нагрузки).
                                # Пример: 8 ядер → poolSize = 16–32.

  timeout: 5s                   # Таймаут подключения/запроса. Формат: 1s, 500ms, 2m.
                                # Подбирается по сетевой задержке + запас.

# === L2
rocksdb:
  enabled: true                 # Включает RocksDB как уровень кэша.

  path: "/path"                 # Путь к папке, где будут лежать SST-файлы RocksDB.

  createIfMissing: true         # Создаёт базу, если путь не существует.

  maxOpenFiles: 100             # Максимальное число открытых файлов (FDs).
                                # Рекомендуется: 100–1000, зависит от уровня параллелизма.
                                # Если лимит превышен — возможно падение или замедление.

  blockSize: 64MiB              # Размер одного блока при чтении (BLOB-like блок).
                                # Обычно: 4MiB – 128MiB.
                                # Больше блок — выше производительность при последовательном чтении.
                                # Меньше блок — меньше RAM, лучше для случайного доступа.

  blockCache: 64MiB             # Размер блока LRU-кэша в оперативной памяти.
                                # Рекомендуется: 20–30% от всей RAM, выделенной RocksDB.
                                # Пример: если RocksDB может использовать 256MiB, blockCache = 64–128MiB.

  writeBufferSize: 64MiB        # Размер memtable (буфера записи перед сбросом на диск).
                                # Обычно: 16MiB – 128MiB.
                                # Больше — выше производительность записи, но больше RAM.
                                # Если RAM ограничена — лучше уменьшить.

api:
  timeout: 5s
  retries: 3

# ==== Описание отдельных кэшей ===============================================

caches:
  - name: user
    prefix: "u"
    levels:
      l0:
        enabled: true
        ttl: 30s
      l1:
        enabled: true
        ttl: 10m
      l2:
        enabled: true
        ttl: 6h
    Api:
      enabled: true
      getBatch:
        url: "localhost:8080/user"
        prop: "id"
