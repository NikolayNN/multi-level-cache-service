# ==== Глобальная конфигурация =====================================

providers:
  - name: "ristretto-l0"
    type: "ristretto"

    # Кол-во счётчиков для оценки частоты доступа.
    # Рекомендуется: 10 × ожидаемое кол-во ключей.
    # Пример: 100k ключей → numCounters = 1_000_000
    numCounters: 1_000_000

    # Размер очереди Set-запросов перед обработкой.
    # Рекомендуется: число CPU × 64
    # Пример: 8 ядер → bufferItems = 512
    bufferItems: 64

    # Максимальный "вес" всех ключей в кэше.
    # Для maxCost важно указывать "стоимость" при Set.
    # Пример: если каждый объект ~1Кб → вместит ~64k объектов
    maxCost: 64MiB

    # Время жизни (TTL) для объектов по умолчанию.
    defaultTTL: 15s

  - name: "redis-l1"
    type: "redis"

    # Хост Redis-сервера.
    host: localhost

    # Порт Redis-сервера.
    port: 6379

    # Пароль для подключения (если требуется).
    password: "12345"

    # Номер базы данных Redis (по умолчанию 0).
    db: 0

    # Количество подключений в пуле.
    # Рекомендуется: 2 × число CPU + N (зависит от нагрузки).
    # Пример: 8 ядер → poolSize = 16–32.
    poolSize: 10

    # Таймаут подключения/запроса. Формат: 1s, 500ms, 2m.
    # Подбирается по сетевой задержке + запас.
    timeout: 5s

  - name: "rocksdb-l2"
    type: "rocksdb"

    # Путь к папке, где будут лежать SST-файлы RocksDB.
    path: "/home/wsl-user/rocksdb-db"

    # Создаёт базу, если путь не существует.
    createIfMissing: true

    # Максимальное число открытых файлов (FDs).
    # Рекомендуется: 100–1000, зависит от уровня параллелизма.
    # Если лимит превышен — возможно падение или замедление.
    maxOpenFiles: 100

    # Размер одного блока при чтении (BLOB-like блок).
    # Обычно: 4MiB – 128MiB.
    # Больше блок — выше производительность при последовательном чтении.
    # Меньше блок — меньше RAM, лучше для случайного доступа.
    blockSize: 64MiB

    # Размер блока LRU-кэша в оперативной памяти.
    # Рекомендуется: 20–30% от всей RAM, выделенной RocksDB.
    # Пример: если RocksDB может использовать 256MiB, blockCache = 64–128MiB.
    blockCache: 64MiB

    # Размер memtable (буфера записи перед сбросом на диск).
    # Обычно: 16MiB – 128MiB.
    # Больше — выше производительность записи, но больше RAM.
    # Если RAM ограничена — лучше уменьшить.
    writeBufferSize: 64MiB


# ==== Конфигурация глобальных слоёв кэша ====
#
# Каждый слой соответствует определённому уровню кэширования (например, Ristretto, Redis, RocksDB)
# и ссылается по имени на провайдер из секции `providers`.
#
# Порядок слоёв имеет значение: индекс в списке определяет уровень —
# от самого "горячего" (быстрого) кэша до самого "холодного" (медленного).
#
# mode:
#   - enabled — слой активен и участвует во всех операциях (GET, PUT, DELETE)
#   - disabled — слой полностью отключён (не читается и не пишется)
layers:
  - name: "ristretto-l0"
    mode: "enabled"

  - name: "redis-l1"
    mode: "enabled"

  - name: "rocksdb-l2"
    mode: "enabled"



# ==== Описание отдельных кэшей ===============================================
caches:
  - name: user
    prefix: "u"
    layers:
      - enabled: true
        ttl: 30s
      - enabled: true
        ttl: 10m
      - enabled: true
        ttl: 6h
    Api:
      getBatch:
        timeout: 10s
        url: "localhost:8080/user"
        prop: "id"
        keyType: "number"  # Отображает тип ключа в запросе "string" | "number"
        headers:
          Authorization: "Bearer abc123"
          Content-Type: "application/json"
